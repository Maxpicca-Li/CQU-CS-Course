'''
1. 提取语料，以标点符号为间隔，取句子
    问题：_!_最后的那个词算吗？ ==> 我感觉不算
    - 每一行读取，提取中的语句
    - 在以每一个句子，标点符号分割句子，得到每一个单句
    - 根据pypinyin转为拼音，构建发射概率
    
    二元模型
    

2. 如何利用好拼音，达到拼音转字的效果（拼音->字：一对多）
    HMM的三个问题中最经典的问题
        **根据显状态序列求解最优隐含状态序列**
    
    
3. 可以另外找库提取原始中文拼音
    pypinyin库

4. 每一个字为一个状态



HMM(A,b,pi) ==> 获取HMM模型的A，B矩阵
    A 转移概率，前一个中文字==>另一个字的二元概率
        - （其后面出现另一个字的次数/前一个中文字的次数）
        - 二元语法模型
            - 构建状态转移矩阵
        - 存储
            - 只保留汉字
            - TODO: 字母、数字如何处理
            - 存储单字和双字出现的次数（不行，这里面也涉及了特殊字符）==> 特殊字符是要删除的
                - Counter['字'] = 1
            - hanlp "燕@琴"
            - me 
                - dict{"word":Counter["word"]}
                - dict{"word":Counter["pingyin"]}

        
    B 发射概率，中文字==>拼音
        - （该中文字对应拼音出现的次数/中文字出现次数）
    
    pi 初始状态
        - ~~给定pinyin，对应的所有单字，给定均分概率~~
        - 统计所有语句中，sent的句首字
        - 或直接所有字，该汉字在训练文本中出现次数/训练的所有汉字出现的总次数

    - HMM中断问题
        - 如果为0，给定一个比较小的值 min_prob = 1e-10


Vertebi算法
    - 需要确定 拼音 --> [字]
        - TODO: 这个对应关系，是基于给定的数据集，还是给定的语料库

    - 确定搜索空间（候选集） ==> 提高搜索效率
        - 读取单字
            - pinyin，以拼音对应的可能的字，作为候选集[word]
            - 老师说的是 
                - 所有字 5000+的初始化
                

        - 读取双字，根据
            - pinyin-pinyin 确定last-curr的所有可能字[last]和[curr]作为候选集

    - 前一个拼音 + 后一个拼音 ==> 减少搜索

FIXME:
    - 去



谷歌讲的
隐状态：中文
显状态：拼音

我理解的 ==> 我理解错了
隐状态：拼音
显状态：中文
'''